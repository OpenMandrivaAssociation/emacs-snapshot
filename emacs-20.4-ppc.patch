--- /dev/null	Tue May  5 13:32:27 1998
+++ emacs-20.4/src/m/powerpc.h	Tue Oct 12 13:10:27 1999
@@ -0,0 +1,84 @@
+/* machine description file for PowerPC.
+   Copyright (C) 1987 Free Software Foundation, Inc.
+
+This file is part of GNU Emacs.
+
+GNU Emacs is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Emacs is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Emacs; see the file COPYING.  If not, write to
+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
+
+/* The following line tells the configuration script what sort of
+   operating system this machine is likely to run.
+   USUAL-OPSYS="Solaris2.5.1 Windows/NT AIX 4.1.2"
+
+/* Define WORDS_BIG_ENDIAN iff lowest-numbered byte in a word
+   is the most significant byte.  */
+
+#define WORDS_BIG_ENDIAN
+
+/* Define NO_ARG_ARRAY if you cannot take the address of the first of a
+ * group of arguments and treat it as an array of the arguments.  */
+
+#define NO_ARG_ARRAY
+
+#if defined(__linux__) && (__GNUC__ - 0 == 2) && (__GNUC_MINOR__ >= 95)
+/* gcc-2.95 on Linux/PPC changed the load address to 0x10000000 */
+#define DATA_SEG_BITS  0x10000000
+#endif
+
+
+/* Say this machine is a PowerPC Refernce Platform */
+
+#ifndef prep
+#define prep
+#endif
+
+/* This level of optimization is reported to work.  */
+# define C_OPTIMIZE_SWITCH -O2
+
+/* Use type int rather than a union, to represent Lisp_Object */
+
+#define NO_UNION_TYPE
+
+/* XINT must explicitly sign-extend */
+
+#define EXPLICIT_SIGN_EXTEND
+
+/* Data type of load average, as read out of kmem.  */
+
+#define LOAD_AVE_TYPE long
+
+/* Convert that into an integer that is 100 for a load average of 1.0  */
+
+#define LOAD_AVE_CVT(x) (int) (((double) (x)) * 100.0 / FSCALE)
+
+/* Define C_ALLOCA if this machine does not support a true alloca
+   and the one written in C should be used instead.
+   Define HAVE_ALLOCA to say that the system provides a properly
+   working alloca function and it should be used.
+   Define neither one if an assembler-language alloca
+   in the file alloca.s should be used.  */
+
+#define HAVE_ALLOCA
+#ifndef NOT_C_CODE
+#if __GNUC__ < 2 /* Modern versions of GCC handle alloca directly.  */
+#include <alloca.h>
+#endif
+#endif
+
+/* Control a conditional in unexelf.c.  */
+#define SOLARIS_POWERPC
+
+/* Avoid .sbss, which causes undump to fail for some reason.  */
+#define LD_SWITCH_MACHINE -G0
+
